name: Run tests and release

# run this workflow only one at a time
concurrency: testing_environment

on:
  push:
    tags:
      - "*"
    branches:
      - master
  pull_request:
    branches:
      - master
    paths-ignore:
      - docs/**/*

env:
  PROJECT_FOLDER: "qgispluginci"
  PYTHON_VERSION_RELEASE: "3.8"

jobs:
  tests:
    name: "Tests"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python: [
            # Do not make simultaneous tests, transifex and GitHub release will fail
            # "3.6",
            "3.9",
          ]

    # "3.10",
    steps:
      - name: Get source code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
          cache-dependency-path: "requirements/*.txt"

      - name: Install system requirements
        run: |
          sudo apt-get update
          sudo apt-get install qtbase5-dev qttools5-dev-tools

      - name: Install Python requirements
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install -U -r requirements.txt
          python -m pip install -U nose2

      - name: Run tests
        env:
          transifex_token: ${{ secrets.TRANSIFEX_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
        run: nose2 -v

  build-python-wheel:
    name: "üêç Python Wheel"
    runs-on: ubuntu-22.04

    steps:
      - name: Get source code
        uses: actions/checkout@v3

      - name: Set version number
        run: |
          VERSION=${GITHUB_REF:-0.0.0}
          VERSION=${VERSION##*/}
          sed -i "s/__VERSION__/${VERSION}/g" setup.py
          sed -i "s/__VERSION__/${VERSION}/g" qgispluginci/__about__.py

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_RELEASE }}
          cache: "pip"
          cache-dependency-path: "requirements/*.txt"

      - name: Install project requirements
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install -U -r requirements.txt
          python -m pip install -U build

      - name: Install project as a package
        run: python -m pip install -e .

      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .

      - uses: actions/upload-artifact@v3
        with:
          name: python_wheel
          path: dist/*
          if-no-files-found: error

  release-gh:
    name: "Release on tag üöÄ"
    runs-on: ubuntu-latest
    needs: [build-python-wheel, tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Retrieve artifact from Python build
        uses: actions/download-artifact@v3
        with:
          name: python_wheel
          path: dist/

      - name: Create/update release on GitHub
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          artifacts: "builds**/*"
          generateReleaseNotes: true
          omitNameDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

  release-pypi:
    name: "üêç Release on PyPI"
    runs-on: ubuntu-latest
    needs: [build-python-wheel, tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Retrieve artifact from Python build
        uses: actions/download-artifact@v3
        with:
          name: python_wheel
          path: dist/

      # -- FROM HERE, A TAG IS REQUIRED ---
      - name: Deploy to PyPI
        uses: pypa/gh-action-pypi-publish@master

        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
